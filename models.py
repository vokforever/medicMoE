import logging
import requests
from typing import List, Tuple, Dict, Any
from config import MODEL_CONFIG, TOKEN_LIMITS

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
async def check_model_availability(provider: str, model_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ {model_name} —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}")
        
        config = MODEL_CONFIG.get(provider)
        if not config or not config.get("client"):
            logging.warning(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
        token_limit = TOKEN_LIMITS.get(provider, {})
        if token_limit.get("daily_limit", 0) > 0 and token_limit.get("used_today", 0) >= token_limit["daily_limit"]:
            logging.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}")
            return False

        # –î–ª—è OpenRouter –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API
        if provider == "openrouter":
            try:
                headers = {
                    "Authorization": f"Bearer {config['api_key']}"
                }
                response = requests.get("https://openrouter.ai/api/v1/models", headers=headers)
                if response.status_code == 200:
                    models = response.json().get("data", [])
                    available_models = [m["id"] for m in models]
                    is_available = model_name in available_models
                    logging.info(f"–ú–æ–¥–µ–ª—å {model_name} –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ OpenRouter: {is_available}")
                    return is_available
                else:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ OpenRouter: {response.status_code}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ OpenRouter: {e}")

        # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        logging.info(f"–ú–æ–¥–µ–ª—å {model_name} —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ {model_name} —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
def update_token_usage(provider: str, tokens_used: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    if provider in TOKEN_LIMITS:
        TOKEN_LIMITS[provider]["used_today"] += tokens_used
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {provider}: +{tokens_used}, –≤—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {TOKEN_LIMITS[provider]['used_today']}")
    else:
        logging.warning(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ TOKEN_LIMITS")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å)
def reset_token_usage():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    logging.info("–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤")
    
    for provider in TOKEN_LIMITS:
        old_value = TOKEN_LIMITS[provider]["used_today"]
        TOKEN_LIMITS[provider]["used_today"] = 0
        logging.info(f"–°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {provider}: {old_value} -> 0")
    
    logging.info("–í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–æ–¥–µ–ª–µ–π —Å failover
async def call_model_with_failover(
    messages: List[Dict[str, str]],
    model_preference: str = None,
    model_type: str = None,  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    system_prompt: str = None
) -> Tuple[str, str, Dict[str, Any]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–æ–¥–µ–ª–µ–π —Å failover.
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏
        model_preference: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        model_type: –¢–∏–ø –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "vision" –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        (response, provider, metadata)
    """
    logging.info(f"call_model_with_failover: —Ç–∏–ø –º–æ–¥–µ–ª–∏: {model_type}, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: {model_preference}")
    logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    all_models = []
    for provider, config in MODEL_CONFIG.items():
        for model in config["models"]:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –º–æ–¥–µ–ª–∏
            model_info = {
                "provider": provider,
                "name": model["name"],
                "priority": model["priority"],
                "type": model.get("type", "text"),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é text
                "client": config["client"]
            }
            all_models.append(model_info)
    
    logging.info(f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(all_models)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if model_type:
        original_count = len(all_models)
        all_models = [m for m in all_models if m.get("type") == model_type]
        logging.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ —Ç–∏–ø—É '{model_type}': {len(all_models)} –∏–∑ {original_count}")
        
        if not all_models:
            logging.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Ç–∏–ø–∞ '{model_type}'")
            # –î–ª—è vision –∑–∞–¥–∞—á –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º text –º–æ–¥–µ–ª–∏ –∫–∞–∫ fallback
            if model_type == "vision":
                logging.error("Vision –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. Text –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
                return "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ vision –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞–≤—Ç—Ä–∞.", "", {}
            else:
                # –î–ª—è text –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
                logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è text –∑–∞–¥–∞—á")
                for provider, config in MODEL_CONFIG.items():
                    for model in config["models"]:
                        model_info = {
                            "provider": provider,
                            "name": model["name"],
                            "priority": model["priority"],
                            "type": model.get("type", "text"),
                            "client": config["client"]
                        }
                        all_models.append(model_info)
                logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π: {len(all_models)}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    all_models.sort(key=lambda x: x["priority"])
    logging.info(f"–ú–æ–¥–µ–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É")
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ—ë –≤ –Ω–∞—á–∞–ª–æ
    if model_preference:
        preferred_models = [m for m in all_models if m["name"] == model_preference]
        other_models = [m for m in all_models if m["name"] != model_preference]
        all_models = preferred_models + other_models
        logging.info(f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å '{model_preference}' –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞")
    
    last_error = None
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–∑–æ–≤–∞ –º–æ–¥–µ–ª–µ–π, –≤—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(all_models)}")
    
    # –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for i, model_info in enumerate(all_models):
        provider = model_info["provider"]
        model_name = model_info["name"]
        client = model_info["client"]
        
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}/{len(all_models)}: –º–æ–¥–µ–ª—å {model_name} –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        if not await check_model_availability(provider, model_name):
            logging.info(f"–ú–æ–¥–µ–ª—å {model_name} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é")
            continue
        
        try:
            logging.info(f"–ü—Ä–æ–±—É—é –º–æ–¥–µ–ª—å {model_name} –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Cerebras
            if provider == "cerebras":
                config = MODEL_CONFIG[provider]
                logging.info(f"Cerebras API Key: {config.get('api_key', '')[:10]}...")
                logging.info(f"Cerebras Base URL: {config.get('base_url', '')}")
                logging.info(f"Client initialized: {config.get('client') is not None}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if system_prompt:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                has_system = any(msg.get("role") == "system" for msg in messages)
                if not has_system:
                    messages = [{"role": "system", "content": system_prompt}] + messages
                    logging.info("–î–æ–±–∞–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OpenRouter
            extra_headers = {}
            if provider == "openrouter":
                extra_headers = {
                    "HTTP-Referer": "https://github.com/vokforever/ai-doctor",
                    "X-Title": "AI Doctor Bot"
                }
                logging.info("–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OpenRouter")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            # –î–ª—è Qwen 3 235B Thinking –º–æ–¥–µ–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            extra_params = {}
            if provider == "cerebras" and "qwen-3-235b" in model_name:
                extra_params = {
                    "max_tokens": 64000,  # Cerebras API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç max_tokens, –Ω–µ max_completion_tokens
                    "temperature": 0.7,
                    "top_p": 0.9
                }
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Qwen 3 235B: {extra_params}")
            
            logging.info(f"–í—ã–∑—ã–≤–∞—é –º–æ–¥–µ–ª—å {model_name} —Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            
            completion = client.chat.completions.create(
                model=model_name,
                messages=messages,
                **extra_params,
                **({"extra_headers": extra_headers} if extra_headers else {})
            )
            
            logging.info(f"–ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            current_answer = completion.choices[0].message.content
            logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(current_answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Cerebras) –º–æ–∂–µ—Ç –±—ã—Ç—å —Ü–µ–ø–æ—á–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
            thinking_process = ""
            if provider == "cerebras" and hasattr(completion.choices[0], 'thinking'):
                thinking_process = completion.choices[0].thinking
                logging.info("–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –≤ choices[0].thinking")
            elif provider == "cerebras" and hasattr(completion.choices[0].message, 'thinking'):
                thinking_process = completion.choices[0].message.thinking
                logging.info("–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –≤ choices[0].message.thinking")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            if hasattr(completion, 'usage') and completion.usage:
                tokens_used = completion.usage.total_tokens
                update_token_usage(provider, tokens_used)
                logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ {provider}: {tokens_used}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            metadata = {
                "provider": provider,
                "model": model_name,
                "type": model_info.get("type", "text"),
                "thinking": thinking_process,
                "usage": getattr(completion, 'usage', None)
            }
            
            logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å –º–æ–¥–µ–ª—å—é {model_name} –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return current_answer, provider, metadata
        except Exception as e:
            last_error = e
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name} –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}: {e}"
            
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Cerebras
            if provider == "cerebras":
                error_msg += f"\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                error_msg += f"- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞\n"
                error_msg += f"- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ {model_name}\n"
                error_msg += f"- –õ–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤\n"
                error_msg += f"- –°—Ç–∞—Ç—É—Å API Cerebras"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ Cerebras
                if "model_not_found" in str(e):
                    error_msg += f"\n‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è."
                    logging.error(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Cerebras")
                elif "authentication" in str(e).lower():
                    error_msg += f"\n‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                    logging.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Cerebras")
                elif "rate_limit" in str(e).lower():
                    error_msg += f"\n‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤."
                    logging.error("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Cerebras")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è OpenRouter
            elif provider == "openrouter":
                error_msg += f"\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                error_msg += f"- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞\n"
                error_msg += f"- –õ–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤\n"
                error_msg += f"- –°—Ç–∞—Ç—É—Å API OpenRouter"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ OpenRouter
                if "rate_limit" in str(e).lower() or "429" in str(e):
                    error_msg += f"\n‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenRouter. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã."
                    logging.error("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ OpenRouter")
                elif "model_not_found" in str(e).lower():
                    error_msg += f"\n‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ OpenRouter."
                    logging.error(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ OpenRouter")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Groq
            elif provider == "groq":
                error_msg += f"\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                error_msg += f"- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞\n"
                error_msg += f"- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ {model_name}\n"
                error_msg += f"- –õ–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤\n"
                error_msg += f"- –°—Ç–∞—Ç—É—Å API Groq"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ Groq
                if "model_not_found" in str(e).lower():
                    error_msg += f"\n‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Groq. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è."
                    logging.error(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Groq")
                elif "authentication" in str(e).lower():
                    error_msg += f"\n‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                    logging.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Groq")
            
            logging.warning(error_msg)
            continue
    
    # –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    logging.error(f"–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
    
    if model_type == "vision":
        error_message = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ vision –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞–≤—Ç—Ä–∞."
    else:
        error_message = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –í—Å–µ –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
    
    return error_message, "", {}
