# Правила для Cursor IDE - AI Doctor Bot

## Структура проекта
Проект разбит на модули для экономии токенов и улучшения читаемости:

### Основные модули:
- `config.py` - конфигурация, клиенты, константы
- `models.py` - работа с ИИ-моделями, failover логика
- `agents.py` - интеллектуальные агенты для анализа
- `database.py` - операции с базой данных
- `utils.py` - утилиты, поиск, обработка данных
- `keyboards.py` - клавиатуры Telegram
- `main.py` - основной файл бота
- `structured_tests_agent.py` - агент структурированных анализов

### Структура папок:
- `docs/` - вся документация проекта (README файлы, описания)
- `test/` - все тестовые файлы и скрипты для тестирования
- `.cursor/` - настройки Cursor IDE
- `.venv/` - виртуальное окружение Python

## Принципы разработки

### 1. Модульность
- Каждый модуль должен иметь четкую ответственность
- Избегайте циклических импортов
- Используйте относительные импорты внутри пакета

### 2. Логирование
- Все функции должны иметь детальное логирование
- Используйте `logging.info()`, `logging.error()`, `logging.debug()`
- Логируйте входные параметры и результаты

### 3. Обработка ошибок
- Всегда используйте try-catch блоки
- Логируйте ошибки с контекстом
- Возвращайте разумные значения по умолчанию

### 4. Типизация
- Используйте type hints для всех функций
- Импортируйте типы из typing модуля
- Документируйте сложные типы

## Стиль кода

### 1. Именование
- Функции: snake_case (например, `get_patient_profile`)
- Классы: PascalCase (например, `ClarificationAgent`)
- Константы: UPPER_SNAKE_CASE (например, `MAX_HISTORY_LENGTH`)
- Переменные: snake_case

### 2. Документация
- Каждая функция должна иметь docstring
- Описывайте параметры, возвращаемые значения и исключения
- Используйте русский язык для медицинской терминологии

### 3. Комментарии
- Комментируйте сложную логику
- Объясняйте медицинские термины
- Добавляйте примеры использования

## Работа с ИИ-моделями

### 1. Failover логика
- Всегда используйте `call_model_with_failover` из `models.py`
- Указывайте тип модели (`text` или `vision`)
- Обрабатывайте ошибки и переключайтесь на резервные модели

### 2. Системные промпты
- Создавайте четкие и структурированные промпты
- Указывайте текущую дату и контекст
- Добавляйте медицинские предупреждения

### 3. Обработка ответов
- Проверяйте валидность JSON ответов
- Обрабатывайте цепочки размышлений (thinking)
- Логируйте использование токенов

## Работа с базой данных

### 1. Supabase
- Используйте клиент из `config.py`
- Всегда обрабатывайте ошибки подключения
- Логируйте операции с базой данных

### 2. Структура данных
- Следуйте существующей схеме таблиц
- Используйте UUID для идентификации пользователей
- Сохраняйте временные метки для всех записей

### 3. Кэширование
- Используйте кэш для часто запрашиваемых данных
- Устанавливайте разумные сроки истечения
- Очищайте устаревшие записи

## Telegram Bot

### 1. Обработчики
- Разделяйте логику на отдельные функции
- Используйте FSM для сложных диалогов
- Обрабатывайте все типы сообщений

### 2. Клавиатуры
- Создавайте клавиатуры в `keyboards.py`
- Используйте эмодзи для лучшего UX
- Группируйте связанные кнопки

### 3. Сообщения
- Экранируйте HTML в пользовательском вводе
- Форматируйте ответы для лучшей читаемости
- Добавляйте контекстную информацию

## Медицинская функциональность

### 1. Анализ анализов
- Используйте `TestAnalysisAgent` для структурирования
- Извлекайте даты, значения и референсные диапазоны
- Обрабатывайте различные форматы данных

### 2. Профили пациентов
- Создавайте профили с минимальными данными
- Обновляйте информацию при получении новых данных
- Объединяйте данные из разных источников

### 3. Поиск информации
- Используйте медицинские источники из `config.py`
- Реализуйте векторный поиск для базы знаний
- Кэшируйте результаты поиска

## Безопасность

### 1. Данные пользователей
- Не логируйте персональные данные
- Используйте UUID вместо прямых ID
- Ограничивайте доступ к медицинским записям

### 2. API ключи
- Храните ключи в переменных окружения
- Не коммитьте секреты в код
- Используйте `.env` файл для локальной разработки

### 3. Валидация
- Проверяйте все пользовательские входы
- Ограничивайте размер загружаемых файлов
- Валидируйте медицинские данные

## Тестирование

### 1. Модульные тесты
- Тестируйте каждый модуль отдельно
- Мокайте внешние зависимости
- Проверяйте граничные случаи

### 2. Интеграционные тесты
- Тестируйте взаимодействие между модулями
- Проверяйте работу с базой данных
- Тестируйте API интеграции

### 3. Тестовые данные
- Используйте фиктивные медицинские данные
- Не используйте реальные данные пациентов
- Создавайте разнообразные тестовые сценарии

## Производительность

### 1. Оптимизация
- Кэшируйте часто используемые данные
- Ограничивайте размер контекста для ИИ
- Используйте асинхронные операции

### 2. Мониторинг
- Отслеживайте использование токенов
- Логируйте время выполнения операций
- Мониторьте размер базы данных

### 3. Масштабирование
- Используйте пулы соединений для базы данных
- Ограничивайте количество одновременных запросов
- Реализуйте очередь для тяжелых операций

## Развертывание

### 1. Переменные окружения
- Создайте `.env.example` с примером переменных
- Документируйте все необходимые ключи
- Проверяйте наличие переменных при запуске

### 2. Зависимости
- Обновляйте `requirements.txt` при добавлении пакетов
- Указывайте версии для стабильности
- Тестируйте совместимость версий

### 3. Мониторинг
- Настройте логирование в файлы
- Добавьте метрики производительности
- Реализуйте health checks

## Рекомендации по разработке

### 1. Начало работы
1. Изучите структуру проекта и документацию
2. Настройте переменные окружения
3. Запустите бота в тестовом режиме

### 2. Добавление функций
1. Определите, в какой модуль добавить функцию
2. Следуйте существующим паттернам
3. Добавьте логирование и обработку ошибок
4. Обновите документацию

### 3. Отладка
1. Проверьте логи для понимания проблемы
2. Используйте команду `/models` для проверки ИИ
3. Проверьте подключение к базе данных
4. Валидируйте входные данные

### 4. Оптимизация
1. Профилируйте медленные операции
2. Оптимизируйте запросы к базе данных
3. Кэшируйте часто используемые данные
4. Мониторьте использование ресурсов

## Работа с документацией

### 1. Структура документации
- Вся документация находится в папке `docs/`
- Основной README: `docs/README_MODULAR.md`
- Специализированные README для каждого модуля
- Документация по изменениям и исправлениям

### 2. Обновление документации
- При изменении функциональности обновляйте соответствующие README
- Документируйте все новые функции и API
- Поддерживайте актуальность примеров использования

## Работа с тестами

### 1. Структура тестов
- Все тестовые файлы находятся в папке `test/`
- Тесты для каждого модуля: `test_[module_name].py`
- Скрипты для тестирования конкретной функциональности

### 2. Запуск тестов
- Тесты можно запускать по отдельности или все сразу
- Используйте виртуальное окружение для тестирования
- Проверяйте работу всех модулей после изменений

## Заключение
Следуйте этим правилам для поддержания качества кода и эффективной разработки. Модульная структура позволяет легко добавлять новые функции и поддерживать существующий код. Всегда думайте о безопасности, производительности и пользовательском опыте.
