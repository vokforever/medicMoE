import os
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import bot_token, supabase, reset_token_usage
from models import call_model_with_failover
from agents import ClarificationAgent, TestAnalysisAgent, IntelligentQueryAnalyzer
from database import (
    generate_user_uuid, create_patient_profile, update_patient_profile,
    get_patient_profile, save_test_results, get_patient_tests,
    get_medical_records, save_medical_record, save_to_knowledge_base,
    save_user_feedback, get_user_successful_responses, save_successful_response
)
from utils import (
    escape_html, search_medical_sources, search_web, search_knowledge_base,
    extract_patient_data_from_text, analyze_image, extract_text_from_pdf,
    check_duplicate_medical_record_ai_enhanced
)
from keyboards import (
    get_feedback_keyboard, get_clarification_keyboard, get_main_keyboard,
    get_profile_confirmation_keyboard, get_profile_update_keyboard,
    get_pdf_analysis_keyboard, get_complete_data_keyboard, get_add_date_keyboard
)

# –ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
from structured_tests_agent import StructuredTestAgent
structured_test_agent = StructuredTestAgent(supabase)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
clarification_agent = ClarificationAgent()
test_agent = TestAnalysisAgent()
intelligent_analyzer = IntelligentQueryAnalyzer()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DoctorStates(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_clarification = State()
    waiting_for_file = State()
    waiting_for_patient_id = State()
    viewing_history = State()
    confirming_profile = State()
    updating_profile = State()
    waiting_for_test_data = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å failover –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
async def generate_answer_with_failover(
        question: str,
        context: str = "",
        history: List[Dict[str, str]] = None,
        patient_data: Dict[str, Any] = None,
        user_id: int = None,
        system_prompt: str = None,
        model_type: str = "text"
) -> Tuple[str, str, Dict[str, Any]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º failover –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (–æ—Ç–≤–µ—Ç, –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    """
    logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å failover –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question[:100]}...")
    logging.info(f"–¢–∏–ø –º–æ–¥–µ–ª–∏: {model_type}, –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
    logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {len(history) if history else 0} —Å–æ–æ–±—â–µ–Ω–∏–π")
    logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {'–µ—Å—Ç—å' if patient_data else '–Ω–µ—Ç'}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    if system_prompt is None:
        system_prompt = f"""–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–∞—á–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, 
        –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∞–Ω–∞–ª–∏–∑—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, 
        –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.
        
        –¢–ï–ö–£–©–ê–Ø –î–ê–¢–ê: {datetime.now().strftime('%d.%m.%Y')} (–≥–æ–¥: {datetime.now().year})
        
        –í–ê–ñ–ù–û: –¢—ã –Ω–µ —Å—Ç–∞–≤–∏—à—å –¥–∏–∞–≥–Ω–æ–∑ –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—à—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞. –í—Å–µ–≥–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é 
        —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ª–µ—á–µ–Ω–∏—è.
        –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ.
        –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω.
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
        
        –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ —É—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º."""
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    else:
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
    messages = [
        {
            "role": "system",
            "content": system_prompt
        }
    ]

    if context:
        messages.append({"role": "system", "content": f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{context}"})
        logging.info("–î–æ–±–∞–≤–ª–µ–Ω –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
    if patient_data:
        patient_info = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ:\n"
        if patient_data.get("name"):
            patient_info += f"–ò–º—è: {patient_data['name']}\n"
        if patient_data.get("age"):
            patient_info += f"–í–æ–∑—Ä–∞—Å—Ç: {patient_data['age']}\n"
        if patient_data.get("gender"):
            patient_info += f"–ü–æ–ª: {patient_data['gender']}\n"
        messages.append({"role": "system", "content": patient_info})
        logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    if history:
        from config import MAX_CONTEXT_MESSAGES
        recent_history = history[-MAX_CONTEXT_MESSAGES:] if len(history) > MAX_CONTEXT_MESSAGES else history
        for msg in recent_history:
            messages.append(msg)
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {len(recent_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    messages.append({"role": "user", "content": question})
    logging.info(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏: {len(messages)}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å failover
    logging.info("–í—ã–∑—ã–≤–∞—é call_model_with_failover")
    return await call_model_with_failover(
        messages=messages,
        system_prompt=system_prompt,
        model_type=model_type
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å MOE –ø–æ–¥—Ö–æ–¥–æ–º (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def generate_answer(question: str, context: str = "", history: List[Dict[str, str]] = None,
                          patient_data: Dict[str, Any] = None, user_id: int = None) -> str:
    answer, _, _ = await generate_answer_with_failover(question, context, history, patient_data, user_id)
    return answer

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def clear_conversation_state(state: FSMContext, chat_id: int):
    try:
        logging.info(f"–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        try:
            scheduler.remove_job(f"reminder_{chat_id}")
            logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—á–∏—â–µ–Ω–æ")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(chat_id: int):
    try:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
        
        await bot.send_message(
            chat_id,
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞—é: –ø–æ–º–æ–≥ –ª–∏ –≤–∞–º –º–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç?",
            reply_markup=get_feedback_keyboard()
        )
        
        logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    await clear_conversation_state(state, message.chat.id)
    profile = get_patient_profile(generate_user_uuid(message.from_user.id))
    
    if profile:
        logging.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω: {profile.get('name', 'N/A')}")
        await message.answer(
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {profile['name']}! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–∞—á–∞.\n\n"
            f"üìä –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –∞–Ω–∞–ª–∏–∑–æ–≤, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à –∞–Ω–∞–º–Ω–µ–∑.\n\n"
            f"üí° –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            f"‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
            f"‚Ä¢ /profile - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞\n"
            f"‚Ä¢ /tests - –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∞–Ω–∞–ª–∏–∑–æ–≤\n"
            f"‚Ä¢ /history - –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤\n"
            f"‚Ä¢ /cleanup_duplicates - –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π\n\n"
            f"üîç –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=get_main_keyboard()
        )
    else:
        logging.info("–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–¥–∞—Ç—å")
        await message.answer(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–∞—á–∞.\n\n"
            f"üìä –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –∞–Ω–∞–ª–∏–∑–æ–≤, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à –∞–Ω–∞–º–Ω–µ–∑.\n\n"
            f"üí° –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            f"‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
            f"‚Ä¢ /profile - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞\n"
            f"‚Ä¢ /tests - –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∞–Ω–∞–ª–∏–∑–æ–≤\n"
            f"‚Ä¢ /cleanup_duplicates - –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π\n\n"
            f"üîç –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /models –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π
@dp.message(Command("models"))
async def models_command(message: types.Message):
    from config import MODEL_CONFIG, TOKEN_LIMITS
    from models import check_model_availability
    
    status_text = "ü§ñ <b>–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π:</b>\n\n"

    for provider, config in MODEL_CONFIG.items():
        status_text += f"<b>{provider.upper()}:</b>\n"

        for model in config["models"]:
            model_name = model["name"]
            is_available = await check_model_availability(provider, model_name)
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if is_available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            status_text += f"  ‚Ä¢ {model_name}: {status}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        token_info = TOKEN_LIMITS.get(provider, {})
        if token_info.get("daily_limit", 0) > 0:
            used = token_info.get("used_today", 0)
            limit = token_info["daily_limit"]
            percentage = (used / limit) * 100 if limit > 0 else 0
            status_text += f"  üìä –¢–æ–∫–µ–Ω—ã: {used}/{limit} ({percentage:.1f}%)\n"

        status_text += "\n"

    await message.answer(status_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@dp.message(Command("profile"))
async def profile_command(message: types.Message, state: FSMContext):
    profile = get_patient_profile(generate_user_uuid(message.from_user.id))
    if profile:
        await message.answer(
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"üÜî ID: {profile['id']}\n"
            f"üìù –ò–º—è: {profile['name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
            f"‚ößÔ∏è –ü–æ–ª: {profile['gender']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {profile['created_at'][:10]}",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
            "1. –í–∞—à–µ –∏–º—è\n"
            "2. –í–æ–∑—Ä–∞—Å—Ç\n"
            "3. –ü–æ–ª (–ú/–ñ)\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ò–º—è: [–≤–∞—à–µ –∏–º—è]</b>\n"
            "<b>–í–æ–∑—Ä–∞—Å—Ç: [–≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç]</b>\n"
            "<b>–ü–æ–ª: [–ú/–ñ]</b>",
            parse_mode="HTML"
        )
        await state.set_state(DoctorStates.waiting_for_patient_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    try:
        response = supabase.table("doc_user_feedback").select("*").eq("user_id", generate_user_uuid(message.from_user.id)).execute()
        total = len(response.data)
        helped = sum(1 for item in response.data if item["helped"])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Å–ø–µ—à–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º
        successful_responses = get_user_successful_responses(generate_user_uuid(message.from_user.id))

        await message.answer(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}\n"
            f"–ü–æ–º–æ–≥–ª–æ –æ—Ç–≤–µ—Ç–æ–≤: {helped}\n"
            f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {helped / total * 100:.1f}%" if total > 0 else "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history
@dp.message(Command("history"))
async def history_command(message: types.Message):
    try:
        response = supabase.table("doc_user_feedback").select("*").eq("user_id", generate_user_uuid(message.from_user.id)).order(
            "created_at", desc=True).limit(5).execute()
        if response.data:
            history_text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            for item in response.data:
                status = "‚úÖ" if item["helped"] else "‚ùå"
                history_text += f"{status} {item['question'][:50]}...\n"
            await message.answer(history_text)
        else:
            await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
@dp.message(Command("clear"))
async def clear_command(message: types.Message, state: FSMContext):
    try:
        await clear_conversation_state(state, message.chat.id)
        supabase.table("doc_user_feedback").delete().eq("user_id", generate_user_uuid(message.from_user.id)).execute()
        await message.answer("üóëÔ∏è –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cleanup_duplicates
@dp.message(Command("cleanup_duplicates"))
async def cleanup_duplicates_command(message: types.Message):
    try:
        from utils import cleanup_duplicate_medical_records
        user_id = generate_user_uuid(message.from_user.id)
        deleted_count = cleanup_duplicate_medical_records(user_id)
        
        if deleted_count > 0:
            await message.answer(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {deleted_count} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π.")
        else:
            await message.answer("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(DoctorStates.waiting_for_patient_id)
async def handle_profile_creation(message: types.Message, state: FSMContext):
    try:
        text = message.text
        name = ""
        age = 0
        gender = ""

        for line in text.split('\n'):
            line = line.strip().lower()
            if line.startswith('–∏–º—è:'):
                name = line.split(':', 1)[1].strip()
            elif line.startswith('–≤–æ–∑—Ä–∞—Å—Ç:'):
                try:
                    age = int(line.split(':', 1)[1].strip())
                except:
                    pass
            elif line.startswith('–ø–æ–ª:'):
                gender = line.split(':', 1)[1].strip()

        if name and age > 0 and gender in ['–º', '–∂']:
            if create_patient_profile(generate_user_uuid(message.from_user.id), name, age, gender, message.from_user.id):
                await message.answer(
                    f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
                    f"üìù –ò–º—è: {name}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                    f"‚ößÔ∏è –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == '–º' else '–ñ–µ–Ω—Å–∫–∏–π'}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã.",
                    parse_mode="HTML",
                    reply_markup=get_main_keyboard()
                )
                await state.clear()
            else:
                await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<b>–ò–º—è: [–≤–∞—à–µ –∏–º—è]</b>\n"
                "<b>–í–æ–∑—Ä–∞—Å—Ç: [–≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç]</b>\n"
                "<b>–ü–æ–ª: [–ú/–ñ]</b>",
                parse_mode="HTML"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —Å–±—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
@dp.startup()
async def on_startup():
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á")
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å
    scheduler.add_job(
        reset_token_usage,
        "cron",
        hour=0,
        minute=0,
        id="reset_token_usage"
    )
    logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00)
    scheduler.add_job(
        cleanup_all_duplicates,
        "cron",
        day_of_week="sun",
        hour=2,
        minute=0,
        id="cleanup_duplicates"
    )
    logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

@dp.shutdown()
async def on_shutdown():
    logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á")
    scheduler.shutdown()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    try:
        await dp.start_polling(bot)
        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
