import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
def get_feedback_keyboard():
    logging.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –î–∞, –ø–æ–º–æ–≥–ª–æ",
        callback_data="feedback_yes"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚ùå –ù–µ—Ç, –Ω–µ –ø–æ–º–æ–≥–ª–æ",
        callback_data="feedback_no"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üîç –ù–∞–π—Ç–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        callback_data="search_more"
    ))
    builder.adjust(2, 1)
    
    logging.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å–æ–∑–¥–∞–Ω–∞")
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è
def get_clarification_keyboard():
    logging.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è")
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üîç –£—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
        callback_data="clarify_question"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã",
        callback_data="upload_tests"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑",
        callback_data="try_again"
    ))
    builder.adjust(1)
    
    logging.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    logging.debug("–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üìä –ú–æ–∏ –∞–Ω–∞–ª–∏–∑—ã",
        callback_data="my_tests"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã",
        callback_data="structured_tests"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üìù –ú–æ–π –∞–Ω–∞–º–Ω–µ–∑",
        callback_data="my_history"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üÜî –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        callback_data="create_profile"
    ))
    builder.adjust(2, 2)
    
    logging.debug("–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def get_profile_confirmation_keyboard():
    logging.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        callback_data="use_extracted_data"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚ùå –ù–µ—Ç, —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
        callback_data="create_anonymous_profile"
    ))
    builder.adjust(1)
    
    logging.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞–Ω–∞")
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def get_profile_update_keyboard():
    logging.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –î–∞, –æ–±–Ω–æ–≤–∏—Ç—å",
        callback_data="update_profile_data"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å",
        callback_data="keep_existing_data"
    ))
    builder.adjust(1)
    
    logging.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞–Ω–∞")
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ PDF
def get_pdf_analysis_keyboard():
    logging.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ PDF")
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –î–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
        callback_data="analyze_pdf"
    ))
    builder.adjust(1)
    
    logging.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ PDF —Å–æ–∑–¥–∞–Ω–∞")
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def get_complete_data_keyboard():
    logging.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        callback_data="complete_test_data"
    ))
    builder.adjust(1)
    
    logging.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã
def get_add_date_keyboard(test_id: int):
    logging.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞ {test_id}")
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É",
        callback_data=f"add_test_date_{test_id}"
    ))
    builder.adjust(1)
    
    logging.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞")
    return builder.as_markup()
