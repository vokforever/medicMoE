[1mdiff --git a/main.py b/main.py[m
[1mindex 07cf185..9c1f336 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -1,550 +1,502 @@[m
 import os[m
 import asyncio[m
[31m-import requests[m
[31m-import json[m
[31m-import uuid[m
 from datetime import datetime, timedelta[m
 from aiogram import Bot, Dispatcher, types, F[m
 from aiogram.filters import Command[m
 from aiogram.fsm.context import FSMContext[m
 from aiogram.fsm.state import StatesGroup, State[m
[31m-from aiogram.utils.keyboard import InlineKeyboardBuilder[m
[31m-from openai import OpenAI[m
[31m-from tavily import TavilyClient[m
[31m-from supabase import create_client, Client[m
 from apscheduler.schedulers.asyncio import AsyncIOScheduler[m
[31m-import aiohttp[m
[31m-from bs4 import BeautifulSoup[m
[31m-import logging[m
[31m-import numpy as np[m
[31m-from typing import List, Tuple, Dict, Any, Optional[m
[31m-from dotenv import load_dotenv[m
[31m-import PyPDF2[m
[31m-import io[m
[31m-import base64[m
[31m-import re[m
[31m-from dateutil.parser import parse[m
[31m-from pytz import timezone[m
 [m
[31m-# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è[m
[31m-load_dotenv()[m
[31m-[m
[31m-# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è[m
[31m-logging.basicConfig(level=logging.INFO)[m
[31m-[m
[31m-# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤[m
[31m-bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))[m
[31m-dp = Dispatcher()[m
[31m-scheduler = AsyncIOScheduler()[m
[31m-[m
[31m-# OpenRouter[m
[31m-openrouter_client = OpenAI([m
[31m-    base_url="https://openrouter.ai/api/v1",[m
[31m-    api_key=os.getenv("OPENROUTER_API_KEY"),[m
[32m+[m[32m# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π[m
[32m+[m[32mfrom config import bot_token, supabase, reset_token_usage[m
[32m+[m[32mfrom models import call_model_with_failover[m
[32m+[m[32mfrom agents import ClarificationAgent, TestAnalysisAgent, IntelligentQueryAnalyzer[m
[32m+[m[32mfrom database import ([m
[32m+[m[32m    generate_user_uuid, create_patient_profile, update_patient_profile,[m
[32m+[m[32m    get_patient_profile, save_test_results, get_patient_tests,[m
[32m+[m[32m    get_medical_records, save_medical_record, save_to_knowledge_base,[m
[32m+[m[32m    save_user_feedback, get_user_successful_responses, save_successful_response[m
 )[m
[31m-[m
[31m-# Tavily API[m
[31m-tavily_client = TavilyClient(api_key=os.getenv("TAVILY_API_KEY"))[m
[31m-[m
[31m-# Supabase[m
[31m-supabase: Client = create_client([m
[31m-    supabase_url=os.getenv("SUPABASE_URL"),[m
[31m-    supabase_key=os.getenv("SUPABASE_KEY")[m
[32m+[m[32mfrom utils import ([m
[32m+[m[32m    escape_html, search_medical_sources, search_web, search_knowledge_base,[m
[32m+[m[32m    extract_patient_data_from_text, analyze_image, extract_text_from_pdf,[m
[32m+[m[32m    check_duplicate_medical_record_ai_enhanced[m
[32m+[m[32m)[m
[32m+[m[32mfrom keyboards import ([m
[32m+[m[32m    get_feedback_keyboard, get_clarification_keyboard, get_main_keyboard,[m
[32m+[m[32m    get_profile_confirmation_keyboard, get_profile_update_keyboard,[m
[32m+[m[32m    get_pdf_analysis_keyboard, get_complete_data_keyboard, get_add_date_keyboard[m
 )[m
 [m
[31m-# –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏[m
[31m-MEDICAL_SOURCES = [[m
[31m-    "https://www.who.int/ru",[m
[31m-    "https://medportal.ru",[m
[31m-    "https://www.webmd.com",[m
[31m-    "https://www.mayoclinic.org"[m
[31m-][m
[31m-[m
[31m-# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è failover[m
[31m-# Vision –º–æ–¥–µ–ª–∏ (qwen, gemini) –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π[m
[31m-# Text –º–æ–¥–µ–ª–∏ (deepseek, gpt, glm, kimi) –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á[m
[31m-# [m
[31m-# –í–ê–ñ–ù–û: –†–∞–∑–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:[m
[31m-# - OpenAI/OpenRouter: max_tokens[m
[31m-# - Cerebras: max_tokens (–Ω–µ max_completion_tokens)[m
[31m-# - Groq: max_tokens[m
[31m-MODEL_CONFIG = {[m
[31m-    "openrouter": {[m
[31m-        "api_key": os.getenv("OPENROUTER_API_KEY"),[m
[31m-        "base_url": "https://openrouter.ai/api/v1",[m
[31m-        "models": [[m
[31m-            {"name": "qwen/qwen2.5-vl-72b-instruct:free", "priority": 1, "type": "vision"},[m
[31m-            {"name": "google/gemini-2.0-flash-exp:free", "priority": 2, "type": "vision"},[m
[31m-            {"name": "deepseek/deepseek-chat-v3-0324:free", "priority": 3, "type": "text"},[m
[31m-            {"name": "deepseek/deepseek-r1-0528:free", "priority": 4, "type": "text"},[m
[31m-            {"name": "openai/gpt-oss-20b:free", "priority": 5, "type": "text"},[m
[31m-            {"name": "z-ai/glm-4.5-air:free", "priority": 6, "type": "text"},[m
[31m-            {"name": "moonshotai/kimi-k2:free", "priority": 7, "type": "text"}[m
[31m-        ],[m
[31m-        "client": openrouter_client[m
[31m-    },[m
[31m-    "groq": {[m
[31m-        "api_key": os.getenv("GROQ_API_KEY"),[m
[31m-        "base_url": "https://api.groq.com/openai/v1",[m
[31m-        "models": [[m
[31m-            {"name": "meta-llama/llama-4-scout-17b-16e-instruct:free", "priority": 1, "type": "vision"},[m
[31m-            {"name": "meta-llama/llama-4-maverick-17b-128e-instruct:free", "priority": 2, "type": "vision"},[m
[31m-            {"name": "llama-3.2-90b-vision-preview:free", "priority": 3, "type": "vision"},[m
[31m-            {"name": "deepseek-r1-distill-llama-70b", "priority": 4, "type": "text"},[m
[31m-            {"name": "openai/gpt-oss-120b", "priority": 5, "type": "text"}[m
[31m-        ],[m
[31m-        "client": None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ[m
[31m-    },[m
[31m-    "cerebras": {[m
[31m-        "api_key": os.getenv("CEREBRAS_API_KEY"),[m
[31m-        "base_url": "https://api.cerebras.ai/v1",[m
[31m-        "models": [[m
[31m-            {"name": "qwen-3-235b-a22b-thinking-2507", "priority": 1, "type": "text"},[m
[31m-            {"name": "qwen-3-235b-a22b-instruct-2507", "priority": 2, "type": "text"}[m
[31m-[m
[31m-        ],[m
[31m-        "client": None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è Cerebras –∏ Groq[m
[31m-if MODEL_CONFIG["cerebras"]["api_key"]:[m
[31m-    MODEL_CONFIG["cerebras"]["client"] = OpenAI([m
[31m-        base_url=MODEL_CONFIG["cerebras"]["base_url"],[m
[31m-        api_key=MODEL_CONFIG["cerebras"]["api_key"][m
[31m-    )[m
[32m+[m[32m# –ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö[m
[32m+[m[32mfrom structured_tests_agent import StructuredTestAgent[m
 [m
[31m-# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram user ID[m
[31m-def generate_user_uuid(telegram_user_id: int) -> str:[m
[31m-    """[m
[31m-    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UUID –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram user ID.[m
[31m-    –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ Telegram user ID –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ UUID.[m
[31m-    """[m
[31m-    # –°–æ–∑–¥–∞–µ–º namespace UUID –¥–ª—è Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UUID)[m
[31m-    telegram_namespace = uuid.UUID('550e8400-e29b-41d4-a716-446655440000')[m
[32m+[m[32m# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏[m
[32m+[m[32mclass SessionManager:[m
[32m+[m[32m    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""[m
     [m
[31m-    # –°–æ–∑–¥–∞–µ–º UUID –Ω–∞ –æ—Å–Ω–æ–≤–µ namespace –∏ user_id[m
[31m-    generated_uuid = str(uuid.uuid5(telegram_namespace, str(telegram_user_id)))[m
[32m+[m[32m    def __init__(self, supabase_client):[m
[32m+[m[32m        self.supabase = supabase_client[m
[32m+[m[32m        self.active_sessions = {}  # user_id: session_data[m
[32m+[m[32m        self.max_history_length = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏[m
[32m+[m[41m        [m
[32m+[m[32m    async def load_session_history(self, user_id: str) -> List[Dict]:[m
[32m+[m[32m        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ Supabase"""[m
[32m+[m[32m        try:[m
[32m+[m[32m            logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")[m
[32m+[m[41m            [m
[32m+[m[32m            response = self.supabase.table("doc_conversation_history").select("*") \[m
[32m+[m[32m                .eq("user_id", user_id) \[m
[32m+[m[32m                .order("created_at", desc=True) \[m
[32m+[m[32m                .limit(self.max_history_length) \[m
[32m+[m[32m                .execute()[m
[32m+[m[41m            [m
[32m+[m[32m            history = response.data if response.data else [][m
[32m+[m[32m            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")[m
[32m+[m[41m            [m
[32m+[m[32m            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)[m
[32m+[m[32m            history.sort(key=lambda x: x.get("created_at", ""))[m
[32m+[m[41m            [m
[32m+[m[32m            return history[m
[32m+[m[41m            [m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")[m
[32m+[m[32m            return [][m
     [m
[31m-    logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω UUID –¥–ª—è Telegram user ID {telegram_user_id}: {generated_uuid}")[m
[32m+[m[32m    async def save_session_message(self, user_id: str, message: Dict):[m
[32m+[m[32m        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""[m
[32m+[m[32m        try:[m
[32m+[m[32m            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")[m
[32m+[m[41m            [m
[32m+[m[32m            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è[m
[32m+[m[32m            message_data = {[m
[32m+[m[32m                "user_id": user_id,[m
[32m+[m[32m                "role": message.get("role", "user"),[m
[32m+[m[32m                "content": message.get("content", ""),[m
[32m+[m[32m                "message_type": message.get("type", "text"),[m
[32m+[m[32m                "created_at": datetime.now().isoformat()[m
[32m+[m[32m            }[m
[32m+[m[41m            [m
[32m+[m[32m            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É[m
[32m+[m[32m            self.supabase.table("doc_conversation_history").insert(message_data).execute()[m
[32m+[m[41m            [m
[32m+[m[32m            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é[m
[32m+[m[32m            if user_id not in self.active_sessions:[m
[32m+[m[32m                self.active_sessions[user_id] = {"history": [], "context": {}}[m
[32m+[m[41m            [m
[32m+[m[32m            self.active_sessions[user_id]["history"].append(message_data)[m
[32m+[m[41m            [m
[32m+[m[32m            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ø–∞–º—è—Ç–∏[m
[32m+[m[32m            if len(self.active_sessions[user_id]["history"]) > self.max_history_length:[m
[32m+[m[32m                self.active_sessions[user_id]["history"] = self.active_sessions[user_id]["history"][-self.max_history_length:][m
[32m+[m[41m            [m
[32m+[m[32m            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é")[m
[32m+[m[41m            [m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")[m
     [m
[31m-    return generated_uuid[m
[31m-[m
[31m-if MODEL_CONFIG["groq"]["api_key"]:[m
[31m-    MODEL_CONFIG["groq"]["client"] = OpenAI([m
[31m-        base_url=MODEL_CONFIG["groq"]["base_url"],[m
[31m-        api_key=MODEL_CONFIG["groq"]["api_key"][m
[31m-    )[m
[31m-[m
[31m-# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)[m
[31m-TOKEN_LIMITS = {[m
[31m-    "openrouter": {[m
[31m-        "daily_limit": int(os.getenv("OPENROUTER_DAILY_LIMIT", "100000")),[m
[31m-        "used_today": 0[m
[31m-    },[m
[31m-    "cerebras": {[m
[31m-        "daily_limit": int(os.getenv("CEREBRAS_DAILY_LIMIT", "50000")),[m
[31m-        "used_today": 0[m
[31m-    },[m
[31m-    "groq": {[m
[31m-        "daily_limit": int(os.getenv("GROQ_DAILY_LIMIT", "50000")),[m
[31m-        "used_today": 0[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã[m
[31m-MAX_HISTORY_LENGTH = 10[m
[31m-MAX_CONTEXT_MESSAGES = 6[m
[31m-AGENT_CACHE_EXPIRE_HOURS = 24[m
[31m-[m
[31m-[m
[31m-# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM[m
[31m-class DoctorStates(StatesGroup):[m
[31m-    waiting_for_feedback = State()[m
[31m-    waiting_for_clarification = State()[m
[31m-    waiting_for_file = State()[m
[31m-    waiting_for_patient_id = State()[m
[31m-    viewing_history = State()[m
[31m-    confirming_profile = State()[m
[31m-    updating_profile = State()[m
[31m-    waiting_for_test_data = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤[m
[31m-[m
[31m-[m
[31m-# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML[m
[31m-def escape_html(text: str) -> str:[m
[31m-    logging.debug(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")[m
[32m+[m[32m    async def get_session_context(self, user_id: str) -> str:[m
[32m+[m[32m        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏"""[m
[32m+[m[32m        try:[m
[32m+[m[32m            logging.info(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")[m
[32m+[m[41m            [m
[32m+[m[32m            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏[m
[32m+[m[32m            if user_id not in self.active_sessions or not self.active_sessions[user_id].get("history"):[m
[32m+[m[32m                history = await self.load_session_history(user_id)[m
[32m+[m[32m                if user_id not in self.active_sessions:[m
[32m+[m[32m                    self.active_sessions[user_id] = {"history": [], "context": {}}[m
[32m+[m[32m                self.active_sessions[user_id]["history"] = history[m
[32m+[m[41m            [m
[32m+[m[32m            history = self.active_sessions[user_id]["history"][m
[32m+[m[41m            [m
[32m+[m[32m            if not history:[m
[32m+[m[32m                logging.info("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞")[m
[32m+[m[32m                return "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞."[m
[32m+[m[41m            [m
[32m+[m[32m            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π[m
[32m+[m[32m            recent_messages = history[-10:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π[m
[32m+[m[41m            [m
[32m+[m[32m            context = "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n"[m
[32m+[m[32m            for msg in recent_messages:[m
[32m+[m[32m                role = msg.get("role", "unknown")[m
[32m+[m[32m                content = msg.get("content", "")[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É[m
[32m+[m[32m                context += f"{role}: {content}\n"[m
[32m+[m[41m            [m
[32m+[m[32m            logging.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")[m
[32m+[m[32m            return context[m
[32m+[m[41m            [m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏: {e}")[m
[32m+[m[32m            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏."[m
     [m
[31m-    escaped = ([m
[31m-        text.replace("&", "&amp;")[m
[31m-        .replace("<", "&lt;")[m
[31m-        .replace(">", "&gt;")[m
[31m-    )[m
[32m+[m[32m    async def get_user_profile_context(self, user_id: str) -> str:[m
[32m+[m[32m        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""[m
[32m+[m[32m        try:[m
[32m+[m[32m            logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")[m
[32m+[m[41m            [m
[32m+[m[32m            response = self.supabase.table("doc_patient_profiles").select("*").eq("user_id", user_id).execute()[m
[32m+[m[41m            [m
[32m+[m[32m            if response.data:[m
[32m+[m[32m                profile = response.data[0][m
[32m+[m[32m                context = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞: {profile.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}, "[m
[32m+[m[32m                context += f"–≤–æ–∑—Ä–∞—Å—Ç: {profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}, "[m
[32m+[m[32m                context += f"–ø–æ–ª: {profile.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}"[m
[32m+[m[41m                [m
[32m+[m[32m                if profile.get('birth_date'):[m
[32m+[m[32m                    context += f", –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {profile.get('birth_date')}"[m
[32m+[m[41m                [m
[32m+[m[32m                logging.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {context}")[m
[32m+[m[32m                return context[m
[32m+[m[32m            else:[m
[32m+[m[32m                logging.info("–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")[m
[32m+[m[32m                return "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."[m
[32m+[m[41m                [m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")[m
[32m+[m[32m            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞."[m
     [m
[31m-    logging.debug(f"HTML —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª–∏–Ω–æ–π {len(escaped)} —Å–∏–º–≤–æ–ª–æ–≤")[m
[31m-    return escaped[m
[31m-[m
[32m+[m[32m    async def get_medical_records_context(self, user_id: str) -> str:[m
[32m+[m[32m        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""[m
[32m+[m[32m        try:[m
[32m+[m[32m            logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")[m
[32m+[m[41m            [m
[32m+[m[32m            response = self.supabase.table("doc_medical_records").select("*").eq("user_id", user_id).order("created_at", desc=True).limit(5).execute()[m
[32m+[m[41m            [m
[32m+[m[32m            if response.data:[m
[32m+[m[32m                records = response.data[m
[32m+[m[32m                context = f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏: –Ω–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π\n"[m
[32m+[m[41m                [m
[32m+[m[32m                for i, record in enumerate(records[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3[m
[32m+[m[32m                    record_type = record.get("record_type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[m
[32m+[m[32m                    created_at = record.get("created_at", "")[m
[32m+[m[32m                    content = record.get("content", "")[:300]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É[m
[32m+[m[41m                    [m
[32m+[m[32m                    context += f"\n--- –ó–∞–ø–∏—Å—å {i+1} ---\n"[m
[32m+[m[32m                    context += f"–¢–∏–ø: {record_type}\n"[m
[32m+[m[32m                    context += f"–î–∞—Ç–∞: {created_at}\n"[m
[32m+[m[32m                    context += f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}\n"[m
[32m+[m[41m                [m
[32m+[m[32m                logging.info(f