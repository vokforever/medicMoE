#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 429 –æ—à–∏–±–æ–∫
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models import (
    block_provider_for_day, 
    is_provider_blocked, 
    reset_provider_blocks,
    check_model_availability
)
import asyncio

def test_provider_blocking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    
    # –¢–µ—Å—Ç 1: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    print("\n1. –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    provider = "openrouter"
    block_provider_for_day(provider, "Rate limit exceeded (429)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if is_provider_blocked(provider):
        print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    else:
        print(f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    print("\n2. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    async def test_availability():
        is_available = await check_model_availability(provider, "test-model")
        if not is_available:
            print(f"‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π")
        else:
            print(f"‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π")
    
    asyncio.run(test_availability())
    
    # –¢–µ—Å—Ç 3: –°–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    print("\n3. –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
    reset_provider_blocks()
    
    if not is_provider_blocked(provider):
        print(f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞")
    else:
        print(f"‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider} –Ω–µ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
    print("\n4. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    async def test_availability_after_reset():
        is_available = await check_model_availability(provider, "test-model")
        print(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {is_available}")
    
    asyncio.run(test_availability_after_reset())
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    test_provider_blocking()
