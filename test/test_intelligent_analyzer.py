#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–æ–¥—É–ª—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from main import IntelligentQueryAnalyzer, get_medical_records, generate_user_uuid

async def test_intelligent_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = IntelligentQueryAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–Ω–∞–ª–∏–∑—ã –ø–æ anti-HEV IgG?",
        "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–π –≥–µ–º–æ–≥–ª–æ–±–∏–Ω?",
        "–ú–æ–π —Å–∞—Ö–∞—Ä –≤ –Ω–æ—Ä–º–µ?",
        "–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–µ–ø–∞—Ç–∏—Ç?",
        "–ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –≤–∏–¥—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∫—Ä–æ–≤–∏?",
        "–ö–∞–∫ –ø–∏—Ç–∞—Ç—å—Å—è –ø—Ä–∏ –¥–∏–∞–±–µ—Ç–µ?",
        "–û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –∞–ª–ª–µ—Ä–≥–∏—è",
        "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ IgE?",
        "–ü–æ–∫–∞–∂–∏ –º–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –ø–∞—Ä–∞–∑–∏—Ç–æ–≤"
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
    for i, question in enumerate(test_questions, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {question}")
        print("-" * 50)
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π user_id)
            test_user_id = "test_user_123"
            analysis = await analyzer.analyze_query_type(question, test_user_id)
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º –æ–± –∞–Ω–∞–ª–∏–∑–∞—Ö: {analysis['is_analysis_question']}")
            print(f"üéØ –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö: {analysis['is_specific_indicator_question']}")
            print(f"üë®‚Äç‚öïÔ∏è –ù—É–∂–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –≤—Ä–∞—á–∞: {analysis['needs_doctor_mode']}")
            print(f"üìã –ï—Å—Ç—å –ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {analysis['has_medical_data']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if analysis['has_medical_data']:
                context = await analyzer.get_relevant_medical_context(question, analysis['medical_records'])
                print(f"üìñ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {'–î–∞' if context else '–ù–µ—Ç'}")
                if context:
                    print(f"üìè –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        
        print()
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def test_with_real_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã."""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        real_user_id = "test_real_user"
        medical_records = get_medical_records(real_user_id)
        
        if medical_records:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(medical_records)} –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π")
            
            analyzer = IntelligentQueryAnalyzer()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            question = "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–Ω–∞–ª–∏–∑—ã –ø–æ anti-HEV IgG?"
            analysis = await analyzer.analyze_query_type(question, real_user_id)
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis}")
            
            if analysis['has_medical_data']:
                context = await analyzer.get_relevant_medical_context(question, analysis['medical_records'])
                print(f"üìñ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {'–î–∞' if context else '–ù–µ—Ç'}")
        
        else:
            print("‚ÑπÔ∏è –†–µ–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_intelligent_analyzer())
    asyncio.run(test_with_real_data())
    
    print("\n‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")

if __name__ == "__main__":
    main()
